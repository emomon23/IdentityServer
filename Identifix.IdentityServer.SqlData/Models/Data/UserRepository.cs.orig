using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Globalization;
using System.Linq;
using System.Net.Mime;

namespace Identifix.IdentityServer.Models.Data
{
    /// <summary>
    /// Handles Storage and retrieval of user related information
    /// </summary>
    public class UserRepository : IUserRepository
    {
        /// <summary>
        /// Creates and Instance of a UserRepository
        /// </summary>
        /// <param name="context"></param>
        public UserRepository(SqlContext context)
        {
            Guard.IsNotNull(context, "context");
            Context = context;
        }

        protected internal SqlContext Context { get; set; }

        /// <summary>
        /// Retreives a list of all countries
        /// </summary>
        /// <returns></returns>
        public IList<Country> RetrieveCountries()
        {
            return Context.Countries.OrderBy(country=>country.Name).ToList();
        }

        /// <summary>
        /// Retrieves a list of states having the specified countryId
        /// </summary>
        /// <param name="countryId"></param>
        /// <returns></returns>
        public IList<State> RetrieveStates(int countryId)
        {
            return Context.States.Where(state => state.CountryId == countryId).OrderBy(state=>state.Name).ToList();
        }

        public IList<State> RetrieveStates()
        {
            return Context.States.OrderBy(s => s.Name).ToList();
        }

        /// <summary>
        ///  Retrieves as list of states having a country with the specified code
        /// </summary>
        /// <param name="countryCode"></param>
        /// <returns></returns>
        public IList<State> RetrieveStates(string countryCode)
        {
            string code = CultureInfo.InvariantCulture.TextInfo.ToUpper(countryCode);
            return
                Context.Countries.Include("States").SingleOrDefault(
                    country => country.Code==code)?
                    .States.OrderBy(state => state.Name).ToList() ?? new List<State>();
        }

        /// <summary>
        /// Checks to see if there is an existin guser with the spceified e-mail address.
        /// </summary>
        /// <param name="emailAddress"></param>
        /// <returns></returns>
        public bool CheckIfEmailExists(string emailAddress)
        {
            string email = emailAddress.ToLower();
            return Context.Users.Any(user => user.Email.ToLower() == email);
        }

        public UserAccount SaveUser(UserAccount user)
        {
            UserAccount result = null;

            if (user.Id != 0)
            {
                result = user;  
                Context.Entry(user).State = EntityState.Modified;
            }
            else
            {
                Context.Users.Add(user);
            }

            Context.SaveChanges();

            if (result == null)
            {
                result = Context.Users.FirstOrDefault(u => u.Email == user.Email);
            }

            return result;
        }

<<<<<<< HEAD
        public User RetrieveUser(object emailORId)
=======
        public UserAccount RetrieveUser(string emailAddress)
>>>>>>> 33015b16a60c60a41a1edf9ef92b13f34dd12357
        {
            User result = null;
            int userId = 0;

            if (int.TryParse(emailORId.ToString(), out userId))
            {
                result = Context.Users.Include("Shop").FirstOrDefault(u => u.Id == userId);
            }
            else
            {
                result = Context.Users.Include("Shop").FirstOrDefault(u => u.Email == emailORId.ToString());
            }
            return result;
        }

        public Shop RetrieveShop(Address address)
        {
            var result = (from s in Context.Shops
                join a in Context.Addresses
                    on s.AddressId equals a.Id
                where a.Line1 == address.Line1
                      && a.City == address.City
                      && a.PostalCode == address.PostalCode
                select s).FirstOrDefault();

            return result;
        }
    }
}